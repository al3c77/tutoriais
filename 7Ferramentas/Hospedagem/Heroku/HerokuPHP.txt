Criação de Projetos em PHP no Heroku

Criar uma conta

Requisitos instalados localmente
- PHP
- Composer
- Git

Instalar também localmente o Heroku CLI

sudo npm install -g heroku

Login

heroku login

Clonar um exemplo localmente com suporte a PHP

mkdir heroku
cd heroku
git clone https://github.com/heroku/php-getting-started.git ola
cd ola

Criar um app remoto no Heroku

heroku create ribaola

Saídas:
Creating ⬢ ribaola... done
https://ribaola.herokuapp.com/ | https://git.heroku.com/ribaola.git

git push heroku main

ou
heroku create
Creating sharp-rain-871... done, stack is cedar-14
http://sharp-rain-871.herokuapp.com/ | https://git.heroku.com/sharp-rain-871.git
Git remote heroku added

...
remote: -----> Launching...
remote:        Released v3
remote:        https://ribaola.herokuapp.com/ deployed to Heroku
remote: 
remote: Verifying deploy... done.
To https://git.heroku.com/ribaola.git
 * [new branch]      main -> main

The application is now deployed. Ensure that at least one instance of the app is running:

heroku ps:scale web=1

Now visit the app at the URL generated by its app name. As a handy shortcut, you can open the website as follows:

heroku open


Adicionando um banco de dados mysql ao aplicativo

Criar um banco mysql no servidor remoto do Heroku

heroku addons:create cleardb:ignite

Receber a URL do novo banco
heroku config | grep CLEARDB_DATABASE_URL
CLEARDB_DATABASE_URL: mysql://xxxxxxxxxxxxxxxxxxxxxxx?reconnect=true

mysql -u bda37eff166954 -h us-cdbr-iron-east-04.cleardb.net -p heroku_3c94174e0cc6cd8

 Than you can import the tables using the following commands

mysql> source [path to engelsystem]/engelsystem/db/install.sql;
mysql> source [path to engelsystem]/engelsystem/db/update.sql;
mysql> exit;

Declare app dependencies

Since we have added the mysql database we need to add the dependencies also.

{
  "require": {
    "ext-mysql": "*"
  },
   "require": {
      "ext-gettext": "*"
    },
   "require-dev": {
      "heroku/heroku-buildpack-php": "*"
   }
}

composer update

we need to modify it in the config/config.php file

$url = parse_url(getenv("CLEARDB_DATABASE_URL"));
$server = $url["host"];
$username = $url["user"];
$password = $url["pass"];
$db = substr($url["path"], 1);

$config = array(
    'host' => $server ,
    'user' => $username ,
    'pw' => $password,
    'db' => $db 
);

git add -A
$ git commit -m "heroku deploy"
$ git push heroku development:master

https://blog.fossasia.org/deploying-php-and-mysql-app-on-heroku/


Exportar o banco local para o remoto
heroku config | grep CLEARDB_DATABASE_URL

mysql -u b5bf52783a17e5 -h us-cdbr-iron-east-05.cleardb.net -p heroku_f677d75e73d39a7 < facebook.sql

https://scotch.io/@phalconVee/deploying-a-php-and-mysql-web-app-with-heroku

heroku addons:create heroku-mysql:hobby-dev

Adding heroku-postgresql:hobby-dev... done, v3 (free)

This creates a database, and sets a DATABASE_URL config var (you can check by running heroku config).

Modify composer.json to include a dependency for a simple PDO service provider, csanquer/pdo-service-provider:

composer require csanquer/pdo-service-provider=~1.1dev

Install the new dependency:

composer update

Now modify index.php to extend the app to add a PDO connection:

$dbopts = parse_url(getenv('DATABASE_URL'));
$app->register(new Csanquer\Silex\PdoServiceProvider\Provider\PDOServiceProvider('pdo'),
               array(
                'pdo.server' => array(
                   'driver'   => 'pgsql',
                   'user' => $dbopts["user"],
                   'password' => $dbopts["pass"],
                   'host' => $dbopts["host"],
                   'port' => $dbopts["port"],
                   'dbname' => ltrim($dbopts["path"],'/')
                   )
               )
);

Note how this code retrieves the DATABASE_URL config var from the environment using getenv(), and extracts information on hostname, database and credentials from that config var using parse_url().

In the same file, add a new handler to query the database:

$app->get('/db/', function() use($app) {
  $st = $app['pdo']->prepare('SELECT name FROM test_table');
  $st->execute();

  $names = array();
  while ($row = $st->fetch(PDO::FETCH_ASSOC)) {
    $app['monolog']->addDebug('Row ' . $row['name']);
    $names[] = $row;
  }

  return $app['twig']->render('database.twig', array(
    'names' => $names
  ));
});

Ver os logs

heroku logs --tail

Define a Procfile

Criar um arquivo texto, chamado de "Procfile" no raiz do aplicativo contendo uma ou mais linhas para serem executadas e garantir o devido suporte, apache, nginx, etc.

Exemplo de Procfile:

web: vendor/bin/heroku-php-apache2 web/

web: vendor/bin/heroku-php-apache2 public/

Scale the app

Right now, your app is running on a single web dyno. Think of a dyno as a lightweight container that runs the command specified in the Procfile.

You can check how many dynos are running using the ps command:

heroku ps

Declare app dependencies

Heroku recognizes an app as PHP by the existence of a composer.json file in the root directory.

The demo app you deployed already has a composer.json, and it looks something like this:

{
  "require" : {
    "silex/silex": "^2.0.4",
    "monolog/monolog": "^1.22",
    "twig/twig": "^2.0",
    "symfony/twig-bridge": "^3"
  },
  "require-dev": {
    "heroku/heroku-buildpack-php": "*"
  }
}

The composer.json file specifies the dependencies that should be installed with your application. When an app is deployed, Heroku reads this file and installs the appropriate dependencies into the vendor directory.

Your PHP app can then make use of the dependencies after a simple require:

require('../vendor/autoload.php');

Run the following command to install the dependencies, preparing your system for running the app locally:

composer update
Loading composer repositories with package information
Updating dependencies (including require-dev)
  - Installing psr/log (1.0.0)
    Loading from cache
...
Writing lock file
Generating autoload files

You should always check composer.json and composer.lock into your git repo. The vendor directory should be included in your .gitignore file.

Push local changes

In this step you’ll learn how to propagate a local change to the application through to Heroku. As an example, you’ll modify the application to add an additional dependency (the Cowsay library) and the code to use it.

First, use composer to require the new dependency:

composer require alrik11es/cowsayphp

This will also change composer.json. If you introduced the dependency by modifying the composer.json file yourself, be sure to update the dependencies by running:

composer update

Now modify web/index.php to use this library. Add a new route after the existing one, for /cowsay:

$app->get('/cowsay', function() use($app) {
  $app['monolog']->addDebug('cowsay');
  return "<pre>".\Cowsayphp\Cow::say("Cool beans")."</pre>";
});

When that route is visited, it will render a beautiful cow.

Now deploy. Almost every deploy to Heroku follows this same pattern.

First, add the modified files to the local git repository:

git add .

Now commit the changes to the repository:

git commit -m "Demo"

Now deploy, just as you did previously:

git push heroku main

Finally, check that everything is working:

heroku open cowsay

AddOns

You can list add-ons for your app like so:

heroku addons

To see this particular add-on in action, visit your application’s Heroku URL a few times. Each visit will generate more log messages, which should now get routed to the papertrail add-on. Visit the papertrail console to see the log messages:

heroku addons:open papertrail

Rodar shell interativo

heroku run "php -a"

heroku run bash

View the config vars that are set using heroku config:

heroku config

Provision a database

The add-on marketplace has a large number of data stores, from Redis and MongoDB providers, to Postgres and MySQL. In this step you will add a free Heroku Postgres Starter Tier dev database to your app.

Add the database:

heroku addons:create heroku-postgresql:hobby-dev
Adding heroku-postgresql:hobby-dev... done, v3 (free)

This creates a database, and sets a DATABASE_URL config var (you can check by running heroku config).

Modify composer.json to include a dependency for a simple PDO service provider, csanquer/pdo-service-provider:

composer require csanquer/pdo-service-provider=~1.1dev

Install the new dependency:

composer update

Now modify index.php to extend the app to add a PDO connection:

$dbopts = parse_url(getenv('DATABASE_URL'));
$app->register(new Csanquer\Silex\PdoServiceProvider\Provider\PDOServiceProvider('pdo'),
               array(
                'pdo.server' => array(
                   'driver'   => 'pgsql',
                   'user' => $dbopts["user"],
                   'password' => $dbopts["pass"],
                   'host' => $dbopts["host"],
                   'port' => $dbopts["port"],
                   'dbname' => ltrim($dbopts["path"],'/')
                   )
               )
);

Note how this code retrieves the DATABASE_URL config var from the environment using getenv(), and extracts information on hostname, database and credentials from that config var using parse_url().

In the same file, add a new handler to query the database:

$app->get('/db/', function() use($app) {
  $st = $app['pdo']->prepare('SELECT name FROM test_table');
  $st->execute();

  $names = array();
  while ($row = $st->fetch(PDO::FETCH_ASSOC)) {
    $app['monolog']->addDebug('Row ' . $row['name']);
    $names[] = $row;
  }

  return $app['twig']->render('database.twig', array(
    'names' => $names
  ));
});

This ensures that when you access your app using the /db route, it will return all rows in the test_table table, and render the results using the database.twig template. Create the template in the web/views directory:

{% extends "layout.html" %}

{% block content %}
<p>Got these rows from the database:</p>

<ul>
{% for n in names %}
  <li> {{ n.name }} </li>
{% else %}
  <li>Nameless!</li>
{% endfor %}
</ul>

{% endblock %}

If you get lost making these changes, take a look at the db branch of the sample app.

Deploy the app modifications to Heroku:

git add .

git commit -m "added database access"

git push heroku main

If you now access /db you will see Nameless in the output as there is no table in the database. Assuming that you have Postgres installed locally, use the heroku pg:psql command to connect to the database you provisioned earlier, create a table and insert a row:

heroku pg:psql
psql (9.5.2, server 9.6.2)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.
=> create table test_table (id integer, name text);
CREATE TABLE
=> insert into test_table values (1, 'hello database');
INSERT 0 1
=> \q

Now when you access your app’s /db route, you will see something like this:

Got these rows from the database:

* hello database

Read more about Heroku PostgreSQL.
https://devcenter.heroku.com/articles/deploying-php
https://devcenter.heroku.com/categories/php-support
https://devcenter.heroku.com/articles/getting-started-with-php?singlepage=true
